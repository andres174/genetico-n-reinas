# -*- coding: utf-8 -*-
"""Logro C - genetico n reinas 2 - el bueno

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11973koQcwlAmZiTN5Mh9OHrwPcz79HJv
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import random
from time import time
import copy
import math

def funcionCalidad(individuo):
    size = len(individuo)
    diagonal_izquierda_derecha = [0] * (2*size-1)
    diagonal_derecha_izquierda = [0] * (2*size-1)

    for i in range(size):
        diagonal_izquierda_derecha[i+individuo[i]] += 1
        diagonal_derecha_izquierda[size-1-i+individuo[i]] += 1

    suma = 0

    for i in range(2*size-1):
        if diagonal_izquierda_derecha[i] > 1:
          suma+= diagonal_izquierda_derecha[i] -1
        if diagonal_derecha_izquierda[i] > 1:
          suma+= diagonal_derecha_izquierda[i] -1
    
    return suma

def funcionDeCalidad(individuo):
  n = len(individuo)
  conflictos = 0
  for i in range(n):
      for j in range(i, n):
          if abs(individuo[i] - individuo[j]) == abs(i - j):
              conflictos += 1
  return conflictos

def individuo_inicial(N):
    sol = []
    sol = random.sample(range(N), N)
    return sol

def poblacion_inicial(pob_inicial, N, sol):
    poblacion = []
    for i in range(pob_inicial):
        poblacion.append(random.sample(sol, k=N))
        #genero mi poblacion inicial

    return poblacion

def fitness_prob(poblacionInicial):
    fitness = []
    for individuo in poblacionInicial:
        fitness += [funcionCalidad(individuo)]
        
    fitness = np.array(fitness)
    fitnessProb=fitness/fitness.sum()
    return fitnessProb

def seleccion(poblacionInicial):
    fitnessProb = fitness_prob(poblacionInicial)
    size_poblacion = len(poblacionInicial)
    while True:
        parents = np.random.choice(size_poblacion, 2, p=fitnessProb)
        if parents[0]!=parents[1]: break
    return poblacionInicial[parents[0]], poblacionInicial[parents[1]]

def seleccionTorneo(poblacionInicial, porcentaje):
    nTorneo = round((len(poblacionInicial) * porcentaje)/100)
    size_poblacion = len(poblacionInicial)
    parents = np.random.choice(size_poblacion, nTorneo)
    fo = np.inf
    index = 0
    for i in parents:
      _fo = funcionCalidad(poblacionInicial[i])
      if _fo < fo:
        fo = _fo
        index = i
    return poblacionInicial[index]

def one_point_cross_over(padres, N, mut_fact):
    # Nodos = list(N.get_nodes())
    #Se elige un punto de corte aleatorio:
    pc = random.sample( range(math.floor(len(padres[0])/2)),1)[0]
    hijo1 =  comprobar_hijo(padres[0][:pc] + padres[1][pc:] ,N) 
    hijo2 =  comprobar_hijo(padres[1][:pc] + padres[0][pc:] ,N)
    #return [mutacion_extrema(hijo1,mut_fact),mutacion_extrema(hijo2,mut_fact)]
    #return [mutacion_extrema(hijo1,mut_fact),mutacion_extrema(hijo2,mut_fact)]
    return [mutacion_extrema(hijo1,mut_fact), mutacion_extrema(hijo2,mut_fact)]

def three_point_cross_over(padres, N, mut_fact, k=3):
    # Nodos = list(N.get_nodes())
    #Se elige un punto de corte aleatorio:
    while True:
        pc = sorted(random.sample(range(3,len(poblacion[0])-3),k))
        if(pc[2]-pc[1]) > 7 and (pc[1]-pc[0]) > 7:
            break                                    
    hijo1 =  comprobar_hijo(padres[0][:pc[0]] + padres[1][pc[0]:pc[1]] + padres[0][pc[1]:pc[2]] + padres[1][pc[2]:] ,N) 
    hijo2 =  comprobar_hijo(padres[1][:pc[0]] + padres[0][pc[0]:pc[1]] + padres[1][pc[1]:pc[2]] + padres[0][pc[2]:] ,N)
    return [mutacion_extrema(hijo1,mut_fact), mutacion_extrema(hijo2,mut_fact)]
    #return [local_search_2_opt(mutacion(hijo1,mut_fact),N),local_search_2_opt(mutacion(hijo2,mut_fact),N)]
    
def four_point_cross_over(padres, N, mut_fact, k=4):
    Nodos = list(N.get_nodes())
    #Se elige un punto de corte aleatorio:
    while True:
        pc = sorted(random.sample(range(3,len(poblacion[0])-3),k))
        if (pc[3]-pc[2]) > 4 and (pc[2]-pc[1]) > 4 and (pc[1]-pc[0]) > 4:
            break                                    
    hijo1 =  comprobar_hijo(padres[0][:pc[0]] + padres[1][pc[0]:pc[1]] + padres[0][pc[1]:pc[2]] + padres[1][pc[2]:pc[3]] + padres[0][pc[3]:] ,N) 
    hijo2 =  comprobar_hijo(padres[1][:pc[0]] + padres[0][pc[0]:pc[1]] + padres[1][pc[1]:pc[2]] + padres[0][pc[2]:pc[3]] + padres[1][pc[3]:] ,N)
    #return [mutacion_extrema(hijo1,mut_fact), mutacion_extrema(hijo2,mut_fact)]
    return [mutacion_extrema(hijo1,mut_fact), mutacion_extrema(hijo2,mut_fact)]

def five_point_cross_over(padres, N, mut_fact, k=5):
    Nodos = list(N.get_nodes())
    #Se elige un punto de corte aleatorio:
    while True:
        pc = sorted(random.sample(range(3,len(poblacion[0])-3),k))
        if (pc[4]-pc[3]) > 4 and (pc[3]-pc[2]) > 4 and (pc[2]-pc[1]) > 4 and (pc[1]-pc[0]) > 4:
            break                                    
    hijo1 =  comprobar_hijo(padres[0][:pc[0]] + padres[1][pc[0]:pc[1]] + padres[0][pc[1]:pc[2]] + padres[1][pc[2]:pc[3]] + padres[0][pc[3]:pc[4]] + padres[1][pc[4]:],N) 
    hijo2 =  comprobar_hijo(padres[1][:pc[0]] + padres[0][pc[0]:pc[1]] + padres[1][pc[1]:pc[2]] + padres[0][pc[2]:pc[3]] + padres[1][pc[3]:pc[4]] + padres[0][pc[4]:],N)
    #return [mutacion_extrema(hijo1,mut_fact), mutacion_extrema(hijo2,mut_fact)]
    return [mutacion_extrema(hijo1,mut_fact), mutacion_extrema(hijo2,mut_fact)]


def k_point_cross_over_elit(padres, N, mut_fact, k=3):
    Nodos = list(N.get_nodes())
    #Se elige un punto de corte aleatorio:
    while True:
        pc = sorted(random.sample(range(3,len(poblacion[0])-3),k))
        if(pc[2]-pc[1]) > 3 and (pc[1]-pc[0]) > 3:
            break                                    
    hijo1 =  comprobar_hijo(padres[0][:pc[0]] + padres[1][pc[0]:pc[1]] + padres[0][pc[1]:pc[2]] + padres[1][pc[2]:] ,N) 
    hijo2 =  comprobar_hijo(padres[1][:pc[0]] + padres[0][pc[0]:pc[1]] + padres[1][pc[1]:pc[2]] + padres[0][pc[2]:] ,N)
    #return [local_search_BI_swap(local_search_2_opt(mutacion_extrema(hijo1,mut_fact),N),N),local_search_BI_swap(local_search_2_opt(mutacion_extrema(hijo2,mut_fact), N), N)]
    return [local_search_2_opt(mutacion(hijo1,mut_fact),N),local_search_FI_swap(mutacion(hijo2,mut_fact),N)]


def comprobar_hijo(hijo,N):
    
    not_in_solution = list(set(N) - set(hijo))
      #Recorremos todos los genes y cuandlo encontremos 
    for i in range(len(hijo) ):
        if hijo[i] in hijo[:i]:
            hijo[i] = not_in_solution.pop(0) #Cambiamos el gen y lo eliminamos de la lista not_in_solution
    return hijo 

def cross_over_4(poblacion,N,mut_fact):
    #Definimos en una variable la copia de la población para ir eliminando los padres seleccionados
    # poblacion_copia = copy.deepcopy(poblacion)

    #Definimos en una variable la copia de la población para ir añadiendo los hijos creados
    poblacion_final = copy.deepcopy(poblacion)

    for i in range(round(len(poblacion)/2)):  #Iteramos mientras haya padres disponibles
        #Seleccionamos dos padres al azar
        # padre1,padre2 = random.sample(poblacion_copia, 2)
        #Seleccion por torneo
        padre1 = seleccionTorneo(poblacion, 20)
        while True:
          padre2 = seleccionTorneo(poblacion, 10)
          if padre1!=padre2:
            break
        #hijo1,hijo2 = k_point_cross_over([padre1,padre2],N,mut_fact)
        hijo1,hijo2 = four_point_cross_over([padre1,padre2],N,mut_fact)
        if (hijo1 not in poblacion_final and  hijo2 not in poblacion_final):
            # poblacion_copia.remove(padre1)
            # poblacion_copia.remove(padre2)
            poblacion_final.extend([hijo1,hijo2])
    return poblacion_final

def cross_over_5(poblacion,N,mut_fact):
    #Definimos en una variable la copia de la población para ir eliminando los padres seleccionados
    poblacion_copia = copy.deepcopy(poblacion)

    #Definimos en una variable la copia de la población para ir añadiendo los hijos creados
    poblacion_final = copy.deepcopy(poblacion)
    cont=0
    while cont <= len(poblacion)/2:  #Iteramos mientras haya padres disponibles
        cont+=1
        #Seleccionamos dos padres
        # padre1,padre2 = random.sample(poblacion_copia   ,2)
        # padre1 = seleccionTorneo(poblacion_copia, 5)
        # padre2 = seleccionTorneo(poblacion_copia, 5)
        while True:
          padre1 = seleccionTorneo(poblacion_copia, 5)
          padre2 = seleccionTorneo(poblacion_copia, 5)
          if padre1!=padre2:
            break
        hijo1,hijo2 = five_point_cross_over([padre1,padre2],N,mut_fact)
        poblacion_final.extend([hijo1,hijo2])
        # if (hijo1 not in poblacion_final and  hijo2 not in poblacion_final):
        #     poblacion_copia.remove(padre1)
        #     poblacion_copia.remove(padre2)
        #     poblacion_final.extend([hijo1,hijo2])
    return poblacion_final

def cross_over_3(poblacion,N,mut_fact):
    #Definimos en una variable la copia de la población para ir eliminando los padres seleccionados
    poblacion_copia = copy.deepcopy(poblacion)

    #Definimos en una variable la copia de la población para ir añadiendo los hijos creados
    poblacion_final = copy.deepcopy(poblacion)

    while len(poblacion_copia) > 1:  #Iteramos mientras haya padres disponibles
        #Seleccionamos dos padres
        padre1,padre2 = random.sample(poblacion_copia   ,2)
        hijo1,hijo2 = three_point_cross_over([padre1,padre2],N,mut_fact)
        if (hijo1 not in poblacion_final and  hijo2 not in poblacion_final):
            poblacion_copia.remove(padre1)
            poblacion_copia.remove(padre2)
            poblacion_final.extend([hijo1,hijo2])
    return poblacion_final

def cross_over_1(poblacion,N,mut_fact):
    #Definimos en una variable la copia de la población para ir eliminando los padres seleccionados
    poblacion_copia = copy.deepcopy(poblacion)

    #Definimos en una variable la copia de la población para ir añadiendo los hijos creados
    poblacion_final = copy.deepcopy(poblacion)

    while len(poblacion_copia) > 1:  #Iteramos mientras haya padres disponibles
        #Seleccionamos dos padres al azar
        padre1,padre2 = random.sample(poblacion_copia   ,2)
        hijo1,hijo2 = one_point_cross_over([padre1,padre2],N,mut_fact)
        if (hijo1 not in poblacion_final and  hijo2 not in poblacion_final):
            poblacion_copia.remove(padre1)
            poblacion_copia.remove(padre2)
            poblacion_final.extend([hijo1,hijo2])
    return poblacion_final

def mutacion(hijo, mut_fact):
    if random.random() <= mut_fact:
        gen1,gen2 = sorted(random.sample(range(len(hijo)),2))
        aux = hijo[gen1]
        hijo[gen1] = hijo[gen2]
        hijo[gen2] = aux
        return hijo
    else:
        return hijo[::] 
    
def mutacion_extrema(hijo, mut_fact):
    for i in range(len(hijo)):
        if random.random() <= mut_fact:
            gen = random.choice(list(set(range(len(hijo)))-{i}))
            aux = hijo[i]
            hijo[i] = hijo[gen]
            hijo[gen] = aux
    return hijo

def reemplazo(poblacion, N, fact_elit):
  #Se ordena la población según el fitness(tamaño del recorrido) en una lista de elementos [distancia, solucion]
  poblacion_ordenada = sorted([ [funcionCalidad(individuo), individuo] for individuo in poblacion ], key= lambda x:x[0] )

  #Devolvemos elitismo% y el resto se eligen aleatoriamente
  return [x[1] for x in poblacion_ordenada][:int(N*fact_elit)]  + \
  random.sample([x[1] for x in poblacion_ordenada][int(N*fact_elit):] , int(N*(1-fact_elit))  ) 


#Evalua la población y devuelve el mejor individuo
def solucionesValidas(poblacion, historico_soluciones_validas):
    #soluciones_val = []
    #fitness = math.inf
    for individuo in poblacion:
        mejor_i = []
        mejor_solucion = []
        _fitness = funcionCalidad(individuo)
        if _fitness == 0:
            mejor_i = individuo
            #fitness = _fitness
            #soluciones_val.append(mejor_i)
            if mejor_i not in historico_soluciones_validas:
                historico_soluciones_validas.append(mejor_i)

    return historico_soluciones_validas

#Traduce la solución al tablero
################################################################
def escribe_solucion(S):
################################################################
  n = len(S)
  for x in range(n):
    print("")
    for i in range(n):
      if S[i] == x:
        print(" " + u"\u2022" + " " , end="")
        #\u2655'
      else:
        print(" - ", end="")

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
# N = 10
# 
# pob_inicial = 100
# individuo = individuo_inicial(N)
# poblacion = poblacion_inicial(pob_inicial, N, individuo)
# fact_elit = 0.5
# mut_fact = .04
# generaciones = 100
# 
# historico_conflictos = []
# aux_sol_val = []
# historico_soluciones_validas = []
# 
# 
# print("Inicial", poblacion)
# cont=0
# 
# #(mejor_ind, fitness) = mejor_individuo(poblacion)
# #print("Mejor Individuo Poblacion Inicial:", mejor_ind)
# #print("Fitness:", fitness,"\n")
# #Inciamos el cliclo de generaciones
# while(generaciones > cont) :
#     cont+=1
#   
#     poblacion = cross_over_1(poblacion, individuo, mut_fact)
#     poblacion = reemplazo(poblacion, pob_inicial, fact_elit)
#     historico_soluciones_validas = solucionesValidas(poblacion, historico_soluciones_validas)
#     
#     print("Generacion #", cont)
#     #print("Generacion #", cont, "\n Poblacion", poblacion)
#     #print(historico_soluciones_validas)
#     #print("Generacion #", cont, " Fase 1_cross_over \nLa mejor solución es:" , mejor_ind, "\n Conflictos " , fitness, "\n")
#     #escribe_solucion(mejor_ind)
#     #historico_conflictos.append(fitness), 
#     print("\n")
# 
# 
# #escribe_solucion(mejor_ind)
# #print("\n")

print(poblacion)

print(historico_soluciones_validas)

print(len(historico_soluciones_validas))

"""#Resultados

##10 reinas

[[4, 1, 7, 9, 2, 8, 5, 3, 0, 6], [9, 6, 3, 0, 2, 7, 5, 1, 8, 4], [3, 5, 8, 2, 0, 7, 1, 4, 6, 9], [4, 1, 7, 9, 6, 3, 0, 8, 5, 2], [3, 1, 7, 5, 8, 0, 4, 6, 9, 2], [6, 3, 7, 0, 4, 8, 1, 5, 9, 2], [7, 4, 1, 9, 6, 3, 0, 8, 5, 2], [3, 1, 7, 9, 6, 2, 5, 8, 0, 4], [3, 5, 2, 9, 6, 4, 1, 8, 0, 7], [4, 0, 7, 9, 6, 3, 1, 8, 5, 2], [1, 5, 7, 2, 0, 8, 4, 9, 3, 6], [1, 5, 2, 6, 9, 0, 8, 4, 7, 3], [4, 0, 7, 3, 6, 8, 1, 5, 9, 2], [4, 1, 7, 9, 6, 2, 0, 8, 3, 5], [0, 4, 7, 9, 6, 3, 1, 8, 5, 2], [1, 5, 8, 6, 9, 0, 2, 4, 7, 3], [9, 6, 3, 0, 8, 1, 5, 7, 2, 4], [9, 4, 1, 7, 0, 3, 6, 8, 5, 2], [3, 9, 7, 4, 2, 0, 5, 1, 8, 6], [9, 4, 1, 7, 2, 6, 8, 0, 5, 3], [7, 4, 1, 9, 2, 6, 8, 3, 5, 0], [4, 1, 5, 9, 2, 6, 8, 3, 7, 0], [2, 5, 7, 9, 3, 0, 4, 1, 8, 6], [4, 0, 7, 9, 2, 5, 8, 1, 3, 6], [2, 5, 7, 9, 0, 8, 4, 1, 3, 6], [4, 8, 1, 9, 6, 3, 0, 7, 5, 2], [9, 6, 3, 0, 2, 5, 8, 1, 7, 4], [8, 0, 2, 7, 5, 1, 9, 4, 6, 3], [1, 4, 7, 9, 2, 5, 8, 0, 3, 6], [2, 5, 1, 9, 0, 8, 4, 7, 3, 6], [7, 5, 1, 6, 9, 0, 2, 4, 8, 3], [1, 8, 4, 9, 0, 3, 5, 7, 2, 6], [1, 3, 7, 9, 4, 8, 5, 0, 2, 6], [2, 5, 3, 9, 0, 8, 4, 7, 1, 6], [4, 8, 1, 9, 2, 5, 7, 0, 3, 6], [3, 5, 7, 1, 4, 0, 8, 6, 9, 2], [7, 4, 1, 9, 6, 3, 0, 2, 8, 5], [4, 9, 3, 0, 2, 8, 6, 1, 7, 5], [9, 6, 3, 0, 7, 1, 8, 5, 2, 4], [8, 5, 1, 9, 0, 6, 3, 7, 2, 4], [3, 5, 2, 9, 1, 6, 8, 0, 7, 4], [4, 6, 3, 0, 2, 7, 9, 1, 8, 5], [7, 0, 2, 9, 5, 8, 4, 1, 3, 6], [4, 2, 7, 9, 1, 3, 0, 6, 8, 5], [0, 4, 7, 9, 2, 6, 1, 3, 5, 8], [3, 1, 7, 4, 8, 0, 5, 9, 2, 6], [7, 4, 2, 9, 6, 3, 0, 8, 1, 5], [4, 0, 7, 5, 2, 8, 1, 3, 9, 6], [7, 0, 3, 1, 9, 5, 8, 2, 4, 6], [9, 6, 3, 0, 2, 8, 5, 7, 4, 1], [8, 4, 1, 9, 2, 5, 7, 0, 3, 6], [3, 1, 7, 9, 0, 2, 5, 8, 6, 4], [8, 5, 3, 6, 0, 7, 1, 4, 2, 9], [3, 9, 7, 4, 2, 0, 6, 1, 5, 8], [9, 5, 3, 0, 6, 8, 1, 7, 4, 2], [6, 9, 3, 0, 4, 8, 1, 5, 7, 2], [1, 9, 7, 2, 4, 8, 0, 5, 3, 6], [9, 4, 2, 0, 6, 1, 7, 5, 3, 8], [9, 4, 1, 5, 0, 2, 6, 8, 3, 7], [7, 4, 2, 0, 9, 1, 5, 8, 6, 3], [7, 4, 8, 0, 9, 1, 5, 2, 6, 3], [3, 1, 6, 4, 9, 0, 8, 5, 7, 2], [5, 7, 0, 3, 6, 9, 1, 8, 4, 2], [5, 3, 8, 0, 2, 9, 6, 1, 7, 4], [3, 1, 8, 5, 2, 9, 7, 0, 4, 6], [2, 6, 1, 7, 5, 0, 9, 4, 8, 3], [6, 8, 3, 0, 4, 9, 1, 5, 7, 2], [3, 5, 8, 2, 9, 7, 1, 4, 6, 0], [4, 0, 3, 8, 6, 1, 9, 2, 5, 7], [0, 4, 7, 1, 6, 9, 2, 8, 5, 3], [1, 5, 7, 2, 6, 3, 9, 0, 8, 4], [4, 6, 3, 9, 2, 5, 8, 1, 7, 0], [7, 4, 1, 8, 2, 9, 6, 3, 5, 0], [4, 8, 0, 9, 6, 2, 7, 1, 3, 5], [4, 0, 7, 5, 1, 8, 6, 3, 9, 2], [3, 5, 8, 2, 9, 6, 1, 7, 4, 0], [7, 4, 1, 9, 0, 5, 3, 8, 6, 2], [3, 5, 8, 4, 9, 0, 2, 7, 1, 6], [4, 1, 8, 0, 2, 7, 9, 6, 3, 5], [4, 6, 8, 0, 2, 7, 9, 1, 3, 5], [4, 2, 8, 6, 9, 1, 5, 7, 0, 3], [9, 6, 3, 0, 4, 1, 8, 5, 7, 2], [4, 1, 3, 9, 6, 8, 0, 2, 7, 5], [7, 4, 0, 5, 8, 1, 3, 6, 9, 2], [4, 7, 1, 6, 9, 2, 0, 8, 3, 5], [2, 4, 8, 3, 9, 6, 1, 5, 7, 0], [1, 4, 9, 7, 0, 3, 6, 2, 5, 8], [3, 6, 2, 5, 1, 9, 0, 8, 4, 7], [2, 4, 8, 0, 5, 9, 6, 1, 3, 7], [2, 8, 1, 9, 4, 6, 0, 3, 5, 7], [4, 1, 5, 0, 9, 6, 8, 2, 7, 3], [4, 7, 1, 6, 2, 5, 8, 0, 9, 3], [2, 8, 1, 7, 4, 6, 9, 0, 5, 3], [6, 8, 5, 1, 9, 0, 2, 4, 7, 3], [7, 5, 2, 9, 1, 6, 8, 3, 0, 4], [9, 1, 5, 0, 2, 6, 8, 3, 7, 4], [2, 8, 5, 9, 1, 6, 0, 3, 7, 4], [4, 2, 9, 3, 6, 8, 1, 5, 7, 0], [4, 1, 3, 9, 6, 8, 5, 2, 0, 7], [3, 1, 7, 2, 8, 6, 4, 9, 0, 5], [4, 9, 5, 3, 1, 7, 2, 8, 6, 0], [4, 1, 5, 2, 9, 6, 8, 3, 0, 7], [4, 7, 1, 6, 2, 0, 8, 3, 5, 9], [4, 7, 3, 8, 6, 2, 0, 5, 1, 9], [7, 4, 6, 0, 9, 1, 5, 2, 8, 3], [6, 8, 3, 1, 4, 7, 9, 0, 2, 5], [3, 6, 4, 9, 1, 5, 7, 2, 0, 8], [7, 5, 1, 9, 4, 0, 3, 8, 6, 2], [4, 7, 9, 0, 2, 5, 8, 6, 1, 3], [3, 6, 9, 2, 8, 1, 4, 7, 5, 0], [4, 1, 9, 6, 3, 0, 2, 8, 5, 7], [2, 5, 8, 1, 3, 6, 9, 7, 4, 0], [7, 4, 2, 0, 6, 9, 5, 8, 1, 3], [4, 6, 3, 0, 7, 1, 8, 5, 2, 9], [8, 4, 0, 7, 3, 1, 6, 9, 5, 2], [9, 5, 2, 0, 3, 6, 8, 1, 4, 7], [3, 6, 9, 2, 4, 7, 0, 8, 5, 1], [2, 9, 6, 3, 1, 8, 5, 0, 4, 7], [6, 1, 7, 0, 8, 3, 5, 9, 2, 4], [8, 4, 2, 7, 9, 1, 5, 0, 6, 3], [6, 2, 5, 7, 9, 0, 8, 4, 1, 3], [8, 5, 3, 9, 0, 4, 1, 7, 2, 6], [3, 5, 7, 9, 1, 6, 8, 0, 2, 4], [2, 5, 8, 6, 0, 3, 1, 4, 7, 9], [2, 9, 7, 0, 4, 1, 5, 8, 6, 3], [7, 1, 4, 0, 8, 3, 9, 6, 2, 5], [6, 2, 5, 1, 9, 0, 8, 4, 7, 3], [7, 4, 1, 8, 6, 3, 0, 2, 5, 9], [9, 4, 0, 7, 3, 1, 6, 8, 5, 2], [9, 1, 4, 8, 3, 0, 7, 5, 2, 6], [3, 7, 0, 4, 9, 1, 5, 2, 8, 6], [7, 4, 1, 8, 6, 3, 0, 2, 9, 5], [3, 6, 2, 9, 5, 0, 8, 4, 7, 1], [0, 5, 7, 9, 3, 8, 2, 4, 6, 1], [9, 4, 6, 3, 0, 7, 1, 8, 5, 2], [0, 3, 8, 6, 1, 9, 2, 5, 7, 4], [1, 4, 7, 5, 8, 2, 0, 3, 6, 9], [3, 5, 8, 4, 9, 0, 6, 1, 7, 2], [7, 4, 1, 3, 6, 9, 2, 8, 5, 0], [3, 6, 8, 1, 5, 0, 2, 4, 7, 9], [2, 5, 8, 6, 3, 0, 7, 1, 4, 9], [1, 4, 6, 0, 9, 5, 8, 2, 7, 3], [1, 5, 9, 2, 6, 8, 3, 0, 4, 7], [9, 4, 6, 1, 3, 7, 0, 8, 5, 2], [0, 7, 1, 6, 9, 2, 4, 8, 3, 5], [2, 5, 8, 1, 3, 6, 9, 7, 0, 4], [3, 0, 7, 5, 1, 9, 6, 8, 2, 4], [3, 1, 4, 7, 9, 2, 5, 8, 6, 0], [2, 5, 9, 4, 1, 8, 6, 3, 7, 0], [9, 3, 6, 4, 1, 8, 0, 5, 7, 2], [9, 0, 3, 5, 2, 8, 1, 7, 4, 6], [0, 4, 9, 5, 8, 1, 3, 6, 2, 7], [9, 6, 1, 3, 0, 7, 4, 8, 5, 2], [0, 3, 6, 9, 7, 4, 1, 8, 2, 5], [8, 1, 3, 0, 6, 9, 5, 2, 4, 7], [1, 4, 7, 0, 6, 9, 2, 5, 3, 8], [5, 3, 6, 9, 2, 8, 1, 4, 7, 0], [2, 5, 7, 0, 3, 6, 9, 1, 8, 4], [4, 9, 7, 0, 2, 8, 6, 1, 3, 5], [6, 4, 0, 7, 9, 2, 5, 8, 1, 3], [1, 4, 8, 0, 9, 3, 6, 2, 7, 5], [0, 5, 7, 2, 6, 8, 1, 4, 9, 3]]

162

[[8, 6, 4, 2, 0, 9, 7, 5, 3, 1], [0, 2, 5, 8, 6, 9, 3, 1, 4, 7], [8, 2, 5, 1, 9, 4, 0, 7, 3, 6], [3, 6, 4, 2, 0, 9, 7, 5, 8, 1], [2, 9, 5, 1, 8, 4, 0, 7, 3, 6], [4, 2, 5, 9, 6, 3, 0, 7, 1, 8], [7, 0, 2, 9, 5, 8, 4, 1, 3, 6], [0, 8, 5, 2, 9, 7, 4, 1, 3, 6], [6, 8, 5, 2, 0, 7, 4, 1, 3, 9], [3, 6, 0, 5, 1, 9, 7, 2, 4, 8], [9, 3, 5, 8, 2, 0, 7, 1, 4, 6], [6, 2, 5, 1, 9, 0, 8, 4, 7, 3], [2, 4, 8, 3, 0, 9, 7, 5, 1, 6], [6, 8, 5, 1, 9, 0, 2, 4, 7, 3], [3, 6, 0, 5, 8, 1, 7, 4, 2, 9], [6, 1, 5, 2, 9, 7, 4, 8, 3, 0], [9, 4, 2, 5, 8, 1, 7, 0, 3, 6], [3, 6, 8, 5, 1, 9, 0, 2, 4, 7], [5, 2, 0, 9, 7, 4, 1, 3, 8, 6], [4, 2, 5, 8, 6, 0, 3, 1, 7, 9], [0, 2, 5, 8, 6, 9, 3, 1, 7, 4], [6, 2, 5, 8, 0, 9, 3, 1, 7, 4], [3, 1, 4, 8, 0, 9, 7, 5, 2, 6], [4, 2, 5, 8, 1, 3, 6, 9, 7, 0], [8, 1, 4, 2, 0, 9, 7, 5, 3, 6], [6, 8, 2, 5, 1, 9, 4, 0, 7, 3], [6, 8, 2, 0, 9, 7, 4, 1, 3, 5], [9, 4, 2, 0, 6, 1, 7, 5, 3, 8], [0, 3, 5, 8, 2, 9, 7, 1, 4, 6], [4, 2, 5, 9, 6, 1, 3, 7, 0, 8], [9, 5, 3, 8, 0, 2, 6, 1, 7, 4], [3, 6, 2, 5, 1, 9, 0, 8, 4, 7], [6, 2, 9, 1, 8, 5, 3, 0, 7, 4], [5, 3, 0, 6, 8, 1, 7, 4, 2, 9], [7, 4, 1, 3, 6, 9, 2, 8, 5, 0], [4, 2, 0, 9, 6, 8, 3, 1, 7, 5], [7, 4, 0, 5, 8, 1, 3, 6, 2, 9], [3, 0, 7, 9, 1, 5, 2, 8, 6, 4], [3, 8, 4, 7, 0, 2, 5, 1, 6, 9], [6, 2, 9, 5, 1, 8, 4, 0, 7, 3], [3, 8, 2, 5, 1, 9, 0, 6, 4, 7], [7, 4, 1, 5, 2, 9, 6, 8, 3, 0], [7, 4, 2, 9, 6, 3, 0, 8, 1, 5], [5, 7, 0, 4, 8, 1, 3, 6, 2, 9], [9, 4, 2, 8, 3, 1, 7, 5, 0, 6], [5, 2, 4, 7, 0, 8, 3, 1, 6, 9], [3, 7, 4, 8, 0, 9, 1, 5, 2, 6], [4, 2, 0, 8, 6, 1, 9, 7, 5, 3], [4, 2, 8, 5, 9, 1, 6, 0, 3, 7], [9, 4, 2, 7, 3, 1, 8, 5, 0, 6], [8, 4, 1, 3, 0, 9, 7, 5, 2, 6], [2, 4, 8, 3, 5, 9, 1, 6, 0, 7], [5, 7, 1, 4, 2, 8, 6, 9, 3, 0], [3, 7, 0, 4, 8, 1, 5, 9, 2, 6], [4, 2, 8, 5, 7, 1, 3, 0, 6, 9], [1, 4, 7, 0, 6, 9, 2, 5, 3, 8], [9, 4, 6, 3, 0, 2, 8, 5, 7, 1], [0, 8, 5, 1, 6, 9, 2, 4, 7, 3], [3, 8, 2, 9, 1, 6, 4, 0, 7, 5], [5, 7, 0, 4, 6, 1, 9, 2, 8, 3], [4, 2, 5, 8, 1, 7, 0, 3, 6, 9], [3, 8, 4, 2, 0, 9, 6, 1, 5, 7], [6, 2, 9, 5, 0, 8, 4, 7, 1, 3], [0, 6, 9, 5, 1, 8, 4, 2, 7, 3], [3, 5, 9, 4, 6, 0, 2, 7, 1, 8], [5, 2, 4, 9, 7, 3, 1, 6, 8, 0], [3, 7, 2, 8, 5, 9, 0, 6, 4, 1], [6, 2, 5, 1, 9, 0, 3, 7, 4, 8], [5, 3, 8, 0, 2, 9, 6, 1, 7, 4], [5, 2, 8, 3, 7, 4, 1, 9, 0, 6], [5, 9, 2, 4, 8, 1, 3, 6, 0, 7], [6, 4, 1, 5, 0, 9, 3, 8, 2, 7], [0, 4, 9, 5, 8, 1, 3, 6, 2, 7], [9, 2, 6, 3, 1, 8, 4, 0, 7, 5], [9, 5, 2, 8, 3, 0, 7, 1, 4, 6], [2, 4, 8, 0, 5, 9, 6, 1, 3, 7], [6, 8, 2, 0, 3, 7, 4, 1, 9, 5], [6, 1, 5, 8, 0, 9, 4, 2, 7, 3], [4, 7, 5, 2, 9, 1, 6, 8, 3, 0], [2, 5, 7, 9, 0, 8, 4, 1, 3, 6], [6, 2, 7, 5, 1, 8, 4, 0, 3, 9], [1, 3, 7, 9, 4, 8, 5, 0, 2, 6], [1, 8, 2, 7, 9, 3, 5, 0, 4, 6], [4, 2, 7, 5, 1, 8, 0, 3, 6, 9], [9, 2, 8, 1, 4, 7, 0, 6, 3, 5], [6, 0, 5, 7, 1, 3, 8, 2, 4, 9], [6, 2, 9, 1, 4, 8, 3, 0, 7, 5], [6, 2, 5, 7, 9, 0, 8, 4, 1, 3], [7, 4, 1, 3, 8, 6, 2, 9, 5, 0], [7, 4, 0, 5, 8, 1, 3, 6, 9, 2], [5, 7, 9, 0, 3, 1, 6, 8, 2, 4], [3, 6, 9, 2, 8, 1, 4, 7, 5, 0], [9, 2, 4, 8, 1, 3, 6, 0, 7, 5], [3, 6, 2, 9, 5, 0, 8, 4, 7, 1], [9, 1, 3, 8, 6, 2, 0, 5, 7, 4], [1, 8, 5, 7, 9, 0, 2, 4, 6, 3], [5, 7, 0, 3, 8, 4, 1, 9, 2, 6], [6, 4, 0, 5, 8, 2, 7, 3, 1, 9], [6, 1, 5, 7, 9, 0, 3, 8, 4, 2], [5, 7, 0, 6, 3, 1, 8, 4, 2, 9], [1, 7, 9, 2, 8, 5, 3, 0, 6, 4], [7, 2, 4, 9, 1, 8, 5, 3, 6, 0], [3, 5, 9, 2, 0, 7, 4, 1, 8, 6], [1, 4, 7, 3, 6, 9, 2, 0, 5, 8], [6, 2, 5, 7, 0, 4, 8, 1, 3, 9], [6, 2, 7, 5, 1, 9, 4, 0, 8, 3], [7, 4, 6, 0, 9, 1, 5, 2, 8, 3], [6, 2, 5, 8, 4, 0, 3, 9, 7, 1], [9, 3, 0, 4, 8, 1, 5, 7, 2, 6], [7, 4, 2, 0, 6, 9, 5, 8, 1, 3], [9, 1, 4, 8, 3, 0, 7, 5, 2, 6], [0, 3, 8, 4, 7, 9, 2, 5, 1, 6], [3, 5, 8, 2, 0, 7, 1, 4, 6, 9], [2, 4, 8, 3, 9, 6, 1, 5, 7, 0], [9, 3, 5, 2, 8, 1, 4, 7, 0, 6], [3, 7, 0, 8, 1, 4, 6, 9, 2, 5], [4, 1, 5, 0, 9, 6, 8, 2, 7, 3], [6, 1, 9, 5, 0, 8, 4, 2, 7, 3], [3, 1, 4, 7, 9, 2, 5, 8, 6, 0], [0, 7, 5, 2, 8, 1, 4, 9, 3, 6], [3, 9, 0, 8, 5, 2, 6, 1, 7, 4], [3, 7, 4, 2, 0, 9, 1, 5, 8, 6], [3, 1, 8, 5, 9, 6, 0, 2, 4, 7], [3, 5, 0, 8, 6, 2, 7, 1, 4, 9], [7, 5, 0, 2, 6, 8, 3, 1, 4, 9], [7, 2, 8, 3, 9, 0, 5, 1, 4, 6], [7, 4, 1, 9, 6, 3, 0, 2, 8, 5], [5, 2, 6, 3, 0, 7, 9, 4, 1, 8], [2, 0, 5, 8, 4, 9, 7, 3, 1, 6], [2, 7, 5, 1, 9, 4, 0, 3, 8, 6], [4, 9, 3, 0, 2, 8, 6, 1, 7, 5], [0, 5, 9, 2, 6, 8, 3, 1, 4, 7], [3, 8, 4, 9, 0, 5, 7, 1, 6, 2], [2, 7, 5, 1, 8, 4, 0, 3, 9, 6], [4, 2, 8, 6, 9, 1, 5, 7, 0, 3], [3, 7, 2, 4, 8, 0, 5, 9, 1, 6], [8, 4, 7, 3, 0, 9, 1, 5, 2, 6], [4, 9, 5, 3, 1, 7, 2, 8, 6, 0], [9, 2, 5, 8, 1, 7, 0, 3, 6, 4], [6, 9, 2, 0, 8, 4, 7, 1, 3, 5], [6, 1, 7, 2, 0, 9, 4, 8, 5, 3], [0, 2, 5, 7, 9, 4, 8, 1, 3, 6], [0, 6, 3, 5, 8, 1, 9, 4, 2, 7], [0, 7, 3, 8, 6, 2, 9, 5, 1, 4], [9, 1, 4, 7, 0, 2, 5, 8, 6, 3], [3, 5, 2, 9, 1, 6, 8, 0, 7, 4], [3, 8, 2, 7, 9, 0, 5, 1, 4, 6], [9, 7, 4, 2, 0, 5, 1, 8, 6, 3], [4, 8, 1, 9, 2, 5, 7, 0, 3, 6], [0, 5, 8, 4, 9, 7, 3, 1, 6, 2], [1, 8, 2, 9, 6, 3, 0, 4, 7, 5], [6, 4, 7, 0, 8, 3, 1, 9, 2, 5], [1, 5, 8, 6, 9, 0, 2, 4, 7, 3], [2, 8, 5, 7, 1, 3, 0, 6, 4, 9], [7, 4, 2, 0, 9, 1, 5, 8, 6, 3], [3, 8, 4, 1, 9, 0, 5, 7, 2, 6], [6, 3, 1, 8, 4, 9, 7, 5, 2, 0], [0, 3, 9, 6, 8, 2, 4, 1, 7, 5], [7, 4, 1, 8, 6, 3, 0, 2, 5, 9], [9, 2, 4, 8, 3, 0, 6, 1, 5, 7], [1, 8, 5, 0, 2, 9, 6, 3, 7, 4], [0, 3, 6, 9, 2, 8, 1, 4, 7, 5], [1, 4, 8, 0, 9, 3, 6, 2, 7, 5], [4, 1, 3, 9, 6, 8, 0, 2, 7, 5], [9, 2, 4, 7, 1, 8, 5, 0, 6, 3], [7, 0, 4, 8, 1, 3, 6, 2, 9, 5], [9, 6, 3, 0, 7, 1, 8, 5, 2, 4], [3, 9, 7, 4, 2, 0, 5, 1, 8, 6], [3, 6, 8, 5, 1, 4, 0, 7, 9, 2], [6, 8, 0, 4, 1, 5, 2, 9, 7, 3], [0, 7, 1, 6, 8, 2, 4, 9, 3, 5], [4, 8, 0, 9, 6, 2, 7, 1, 3, 5], [3, 0, 7, 5, 1, 9, 6, 8, 2, 4], [6, 4, 0, 5, 3, 9, 7, 2, 8, 1], [5, 2, 8, 6, 0, 9, 1, 4, 7, 3], [7, 4, 8, 0, 9, 1, 5, 2, 6, 3], [0, 7, 4, 1, 8, 2, 9, 6, 3, 5], [6, 4, 1, 5, 0, 9, 7, 2, 8, 3], [0, 5, 7, 2, 6, 8, 1, 4, 9, 3], [3, 7, 0, 8, 5, 1, 6, 9, 2, 4], [1, 8, 5, 2, 9, 3, 0, 7, 4, 6], [3, 8, 0, 4, 9, 1, 5, 7, 2, 6], [6, 8, 3, 0, 4, 9, 1, 5, 7, 2], [3, 6, 9, 2, 4, 7, 0, 8, 1, 5], [3, 6, 2, 9, 5, 1, 8, 4, 0, 7], [0, 9, 4, 6, 8, 2, 7, 1, 3, 5], [3, 6, 8, 5, 2, 0, 7, 4, 1, 9], [0, 3, 6, 9, 1, 8, 4, 2, 7, 5], [4, 2, 8, 6, 1, 3, 0, 9, 7, 5], [2, 9, 5, 1, 8, 6, 3, 7, 0, 4], [2, 6, 1, 3, 7, 9, 4, 8, 5, 0], [7, 1, 8, 0, 5, 3, 9, 6, 4, 2], [7, 0, 6, 3, 1, 8, 4, 2, 9, 5], [9, 0, 5, 3, 1, 7, 2, 8, 6, 4], [4, 2, 9, 5, 1, 8, 6, 3, 7, 0], [7, 4, 1, 8, 6, 3, 0, 2, 9, 5], [2, 7, 5, 8, 0, 9, 4, 6, 1, 3], [6, 2, 7, 5, 1, 9, 4, 0, 3, 8], [3, 1, 8, 5, 2, 9, 7, 0, 4, 6], [7, 4, 1, 8, 2, 9, 6, 3, 5, 0], [9, 3, 1, 8, 4, 0, 7, 5, 2, 6], [7, 4, 1, 9, 6, 3, 0, 8, 5, 2], [4, 6, 9, 3, 1, 8, 2, 5, 7, 0], [9, 6, 3, 0, 8, 1, 5, 7, 2, 4], [6, 4, 7, 0, 3, 9, 2, 5, 8, 1], [7, 3, 1, 6, 4, 9, 0, 8, 5, 2], [6, 1, 7, 0, 8, 3, 5, 9, 2, 4], [1, 5, 2, 6, 9, 0, 8, 4, 7, 3], [7, 4, 1, 9, 0, 5, 3, 8, 6, 2], [3, 6, 8, 1, 5, 0, 2, 4, 7, 9], [6, 8, 3, 5, 0, 9, 1, 4, 2, 7], [6, 8, 2, 7, 1, 3, 5, 0, 9, 4], [6, 3, 0, 7, 1, 8, 5, 2, 4, 9], [6, 9, 3, 1, 8, 2, 5, 7, 0, 4], [2, 7, 5, 0, 8, 1, 4, 6, 3, 9], [9, 6, 0, 3, 1, 7, 5, 8, 2, 4], [5, 7, 2, 4, 8, 1, 9, 6, 3, 0], [0, 3, 8, 6, 9, 2, 5, 1, 4, 7], [3, 7, 4, 2, 0, 9, 6, 8, 5, 1], [8, 4, 2, 7, 3, 6, 0, 9, 1, 5], [4, 7, 1, 3, 9, 0, 8, 5, 2, 6], [2, 5, 1, 9, 0, 8, 4, 7, 3, 6], [6, 9, 5, 2, 0, 7, 3, 1, 8, 4], [4, 1, 7, 9, 6, 2, 0, 8, 3, 5], [8, 6, 2, 7, 1, 4, 0, 9, 3, 5], [3, 6, 4, 9, 1, 5, 7, 2, 0, 8], [9, 2, 4, 7, 1, 8, 6, 0, 3, 5], [6, 2, 5, 7, 9, 0, 3, 1, 4, 8], [4, 8, 1, 9, 6, 3, 0, 7, 5, 2], [6, 2, 0, 5, 8, 4, 9, 7, 3, 1], [0, 6, 8, 1, 5, 9, 2, 4, 7, 3], [0, 2, 8, 6, 9, 3, 1, 4, 7, 5], [3, 5, 2, 9, 6, 0, 7, 4, 1, 8], [3, 1, 7, 4, 8, 0, 5, 9, 2, 6], [6, 0, 2, 5, 7, 9, 3, 8, 4, 1], [5, 7, 0, 3, 6, 9, 1, 8, 4, 2], [8, 4, 2, 7, 9, 1, 5, 0, 6, 3], [0, 7, 5, 1, 6, 9, 3, 8, 4, 2], [4, 2, 7, 9, 1, 3, 0, 6, 8, 5], [6, 2, 7, 5, 3, 0, 9, 4, 8, 1], [3, 5, 9, 2, 4, 7, 1, 8, 6, 0], [7, 3, 8, 2, 4, 9, 0, 5, 1, 6], [7, 3, 8, 0, 2, 4, 6, 1, 9, 5], [8, 4, 1, 9, 2, 5, 7, 0, 3, 6], [8, 5, 3, 9, 0, 4, 1, 7, 2, 6]]


245

## 8 reinas

[[4, 1, 3, 5, 7, 2, 0, 6], [6, 4, 2, 0, 5, 7, 1, 3], [2, 6, 1, 7, 5, 3, 0, 4], [5, 1, 6, 0, 2, 4, 7, 3], [2, 5, 1, 4, 7, 0, 6, 3], [5, 2, 6, 1, 7, 4, 0, 3], [1, 6, 2, 5, 7, 4, 0, 3], [2, 4, 6, 0, 3, 1, 7, 5], [4, 1, 5, 0, 6, 3, 7, 2], [2, 6, 1, 7, 4, 0, 3, 5], [6, 1, 3, 0, 7, 4, 2, 5], [7, 1, 3, 0, 6, 4, 2, 5], [2, 5, 7, 1, 3, 0, 6, 4], [4, 6, 1, 3, 7, 0, 2, 5], [3, 6, 4, 1, 5, 0, 2, 7], [2, 5, 7, 0, 3, 6, 4, 1], [5, 7, 1, 3, 0, 6, 4, 2], [5, 0, 4, 1, 7, 2, 6, 3], [4, 1, 7, 0, 3, 6, 2, 5], [6, 1, 5, 2, 0, 3, 7, 4], [2, 5, 7, 0, 4, 6, 1, 3], [2, 7, 3, 6, 0, 5, 1, 4], [2, 5, 1, 6, 0, 3, 7, 4], [6, 2, 7, 1, 4, 0, 5, 3], [5, 2, 4, 6, 0, 3, 1, 7], [4, 6, 1, 5, 2, 0, 3, 7], [5, 2, 0, 7, 4, 1, 3, 6], [6, 3, 1, 4, 7, 0, 2, 5], [5, 2, 6, 3, 0, 7, 1, 4], [5, 2, 6, 1, 3, 7, 0, 4], [3, 1, 4, 7, 5, 0, 2, 6], [2, 5, 1, 6, 4, 0, 7, 3], [3, 6, 4, 2, 0, 5, 7, 1], [4, 6, 1, 5, 2, 0, 7, 3], [6, 3, 1, 7, 5, 0, 2, 4], [5, 1, 6, 0, 3, 7, 4, 2], [5, 2, 0, 6, 4, 7, 1, 3], [3, 1, 7, 4, 6, 0, 2, 5], [3, 1, 6, 2, 5, 7, 0, 4], [3, 6, 0, 7, 4, 1, 5, 2], [3, 1, 7, 5, 0, 2, 4, 6], [5, 2, 4, 7, 0, 3, 1, 6], [6, 2, 0, 5, 7, 4, 1, 3], [4, 0, 7, 5, 2, 6, 1, 3], [6, 0, 2, 7, 5, 3, 1, 4], [2, 5, 3, 0, 7, 4, 6, 1], [5, 2, 0, 7, 3, 1, 6, 4], [4, 6, 0, 3, 1, 7, 5, 2], [2, 4, 1, 7, 0, 6, 3, 5], [4, 2, 0, 6, 1, 7, 5, 3], [4, 0, 7, 3, 1, 6, 2, 5], [0, 6, 3, 5, 7, 1, 4, 2], [1, 5, 7, 2, 0, 3, 6, 4], [3, 5, 0, 4, 1, 7, 2, 6], [3, 5, 7, 1, 6, 0, 2, 4], [2, 5, 3, 1, 7, 4, 6, 0], [4, 7, 3, 0, 2, 5, 1, 6], [2, 0, 6, 4, 7, 1, 3, 5], [5, 3, 0, 4, 7, 1, 6, 2], [4, 2, 0, 5, 7, 1, 3, 6], [1, 4, 6, 3, 0, 7, 5, 2], [4, 6, 0, 2, 7, 5, 3, 1], [5, 3, 6, 0, 2, 4, 1, 7], [0, 5, 7, 2, 6, 3, 1, 4], [2, 4, 1, 7, 5, 3, 6, 0], [2, 4, 7, 3, 0, 6, 1, 5], [4, 6, 3, 0, 2, 7, 5, 1], [3, 7, 4, 2, 0, 6, 1, 5], [5, 3, 1, 7, 4, 6, 0, 2], [3, 0, 4, 7, 1, 6, 2, 5], [1, 7, 5, 0, 2, 4, 6, 3], [3, 5, 7, 2, 0, 6, 4, 1], [1, 4, 6, 0, 2, 7, 5, 3], [3, 1, 6, 4, 0, 7, 5, 2], [1, 3, 5, 7, 2, 0, 6, 4]]

75 soluciones

[[1, 7, 5, 0, 2, 4, 6, 3], [1, 5, 7, 2, 0, 3, 6, 4], [3, 6, 0, 7, 4, 1, 5, 2], [3, 1, 6, 4, 0, 7, 5, 2], [2, 4, 1, 7, 0, 6, 3, 5], [3, 5, 0, 4, 1, 7, 2, 6], [2, 0, 6, 4, 7, 1, 3, 5], [6, 1, 5, 2, 0, 3, 7, 4], [2, 6, 1, 7, 4, 0, 3, 5], [4, 6, 1, 5, 2, 0, 7, 3], [4, 6, 1, 5, 2, 0, 3, 7], [5, 3, 0, 4, 7, 1, 6, 2], [7, 1, 4, 2, 0, 6, 3, 5], [4, 6, 0, 2, 7, 5, 3, 1], [3, 6, 4, 2, 0, 5, 7, 1], [4, 6, 1, 3, 7, 0, 2, 5], [4, 6, 0, 3, 1, 7, 5, 2], [2, 5, 7, 0, 4, 6, 1, 3], [2, 4, 6, 0, 3, 1, 7, 5], [1, 4, 6, 3, 0, 7, 5, 2], [5, 2, 6, 3, 0, 7, 1, 4], [0, 4, 7, 5, 2, 6, 1, 3], [6, 1, 3, 0, 7, 4, 2, 5], [1, 4, 6, 0, 2, 7, 5, 3], [6, 3, 1, 4, 7, 0, 2, 5], [2, 5, 7, 0, 3, 6, 4, 1], [2, 5, 1, 4, 7, 0, 6, 3], [5, 2, 0, 7, 4, 1, 3, 6], [2, 5, 7, 1, 3, 0, 6, 4], [2, 5, 1, 6, 0, 3, 7, 4], [4, 2, 0, 5, 7, 1, 3, 6], [3, 5, 7, 2, 0, 6, 4, 1], [2, 4, 7, 3, 0, 6, 1, 5], [2, 5, 1, 6, 4, 0, 7, 3], [3, 5, 7, 1, 6, 0, 2, 4], [7, 1, 3, 0, 6, 4, 2, 5], [3, 1, 6, 2, 5, 7, 0, 4], [6, 3, 1, 7, 5, 0, 2, 4], [2, 4, 1, 7, 5, 3, 6, 0], [4, 0, 7, 5, 2, 6, 1, 3], [5, 0, 4, 1, 7, 2, 6, 3], [2, 5, 3, 0, 7, 4, 6, 1], [3, 7, 4, 2, 0, 6, 1, 5], [4, 1, 7, 0, 3, 6, 2, 5], [3, 6, 4, 1, 5, 0, 2, 7], [5, 2, 6, 1, 7, 4, 0, 3], [3, 1, 7, 4, 6, 0, 2, 5], [5, 2, 0, 7, 3, 1, 6, 4], [5, 2, 6, 1, 3, 7, 0, 4], [3, 1, 7, 5, 0, 2, 4, 6], [4, 0, 3, 5, 7, 1, 6, 2], [5, 1, 6, 0, 2, 4, 7, 3], [5, 3, 6, 0, 2, 4, 1, 7], [4, 6, 3, 0, 2, 7, 5, 1], [1, 6, 4, 7, 0, 3, 5, 2], [6, 2, 7, 1, 4, 0, 5, 3], [2, 7, 3, 6, 0, 5, 1, 4], [5, 2, 4, 7, 0, 3, 1, 6], [2, 6, 1, 7, 5, 3, 0, 4], [4, 2, 0, 6, 1, 7, 5, 3], [3, 0, 4, 7, 1, 6, 2, 5], [2, 5, 3, 1, 7, 4, 6, 0], [4, 7, 3, 0, 2, 5, 1, 6], [5, 2, 0, 6, 4, 7, 1, 3], [0, 6, 4, 7, 1, 3, 5, 2], [5, 3, 6, 0, 7, 1, 4, 2], [5, 1, 6, 0, 3, 7, 4, 2], [4, 0, 7, 3, 1, 6, 2, 5], [6, 2, 0, 5, 7, 4, 1, 3], [0, 5, 7, 2, 6, 3, 1, 4], [5, 2, 4, 6, 0, 3, 1, 7], [7, 2, 0, 5, 1, 4, 6, 3], [6, 4, 2, 0, 5, 7, 1, 3], [3, 1, 4, 7, 5, 0, 2, 6], [5, 7, 1, 3, 0, 6, 4, 2], [7, 3, 0, 2, 5, 1, 6, 4], [3, 7, 0, 4, 6, 1, 5, 2], [1, 3, 5, 7, 2, 0, 6, 4], [1, 5, 0, 6, 3, 7, 2, 4], [4, 1, 5, 0, 6, 3, 7, 2], [6, 0, 2, 7, 5, 3, 1, 4], [3, 0, 4, 7, 5, 2, 6, 1], [5, 3, 1, 7, 4, 6, 0, 2], [4, 7, 3, 0, 6, 1, 5, 2], [3, 7, 0, 2, 5, 1, 6, 4], [4, 1, 3, 5, 7, 2, 0, 6], [1, 6, 2, 5, 7, 4, 0, 3], [3, 1, 6, 2, 5, 7, 4, 0], [3, 6, 2, 7, 1, 4, 0, 5], [4, 2, 7, 3, 6, 0, 5, 1], [4, 1, 3, 6, 2, 7, 5, 0]]

91

[[1, 6, 4, 7, 0, 3, 5, 2], [3, 1, 7, 4, 6, 0, 2, 5], [6, 2, 0, 5, 7, 4, 1, 3], [5, 3, 0, 4, 7, 1, 6, 2], [4, 2, 0, 6, 1, 7, 5, 3], [0, 6, 4, 7, 1, 3, 5, 2], [4, 0, 7, 3, 1, 6, 2, 5], [6, 1, 5, 2, 0, 3, 7, 4], [6, 4, 2, 0, 5, 7, 1, 3], [2, 6, 1, 7, 4, 0, 3, 5], [5, 0, 4, 1, 7, 2, 6, 3], [4, 2, 7, 3, 6, 0, 5, 1], [2, 5, 3, 0, 7, 4, 6, 1], [6, 2, 7, 1, 4, 0, 5, 3], [4, 6, 1, 5, 2, 0, 3, 7], [3, 1, 7, 5, 0, 2, 4, 6], [6, 3, 1, 4, 7, 0, 2, 5], [4, 0, 3, 5, 7, 1, 6, 2], [4, 6, 1, 3, 7, 0, 2, 5], [4, 6, 3, 0, 2, 7, 5, 1], [4, 6, 1, 5, 2, 0, 7, 3], [4, 1, 5, 0, 6, 3, 7, 2], [1, 4, 6, 0, 2, 7, 5, 3], [4, 1, 7, 0, 3, 6, 2, 5], [4, 2, 0, 5, 7, 1, 3, 6], [4, 6, 0, 3, 1, 7, 5, 2], [3, 1, 6, 4, 0, 7, 5, 2], [5, 2, 4, 7, 0, 3, 1, 6], [2, 4, 6, 0, 3, 1, 7, 5], [4, 0, 7, 5, 2, 6, 1, 3], [3, 6, 2, 7, 1, 4, 0, 5], [5, 2, 0, 7, 4, 1, 3, 6], [5, 2, 0, 7, 3, 1, 6, 4], [2, 4, 7, 3, 0, 6, 1, 5], [2, 5, 7, 0, 4, 6, 1, 3], [1, 4, 6, 3, 0, 7, 5, 2], [5, 2, 6, 1, 3, 7, 0, 4], [7, 2, 0, 5, 1, 4, 6, 3], [5, 2, 0, 6, 4, 7, 1, 3], [3, 7, 0, 4, 6, 1, 5, 2], [3, 6, 4, 2, 0, 5, 7, 1], [2, 5, 7, 1, 3, 0, 6, 4], [2, 5, 1, 4, 7, 0, 6, 3], [0, 4, 7, 5, 2, 6, 1, 3], [5, 3, 6, 0, 2, 4, 1, 7], [6, 1, 3, 0, 7, 4, 2, 5], [2, 5, 1, 6, 0, 3, 7, 4], [3, 0, 4, 7, 1, 6, 2, 5], [3, 1, 6, 2, 5, 7, 4, 0], [1, 6, 2, 5, 7, 4, 0, 3], [2, 0, 6, 4, 7, 1, 3, 5], [1, 5, 7, 2, 0, 3, 6, 4], [5, 1, 6, 0, 3, 7, 4, 2], [4, 1, 3, 5, 7, 2, 0, 6], [3, 1, 4, 7, 5, 0, 2, 6], [3, 7, 4, 2, 0, 6, 1, 5], [2, 5, 7, 0, 3, 6, 4, 1], [5, 1, 6, 0, 2, 4, 7, 3], [4, 1, 3, 6, 2, 7, 5, 0], [0, 6, 3, 5, 7, 1, 4, 2], [7, 1, 4, 2, 0, 6, 3, 5], [3, 5, 0, 4, 1, 7, 2, 6], [5, 2, 4, 6, 0, 3, 1, 7], [2, 5, 3, 1, 7, 4, 6, 0], [5, 3, 6, 0, 7, 1, 4, 2], [3, 6, 0, 7, 4, 1, 5, 2], [3, 5, 7, 1, 6, 0, 2, 4], [3, 1, 6, 2, 5, 7, 0, 4], [4, 6, 0, 2, 7, 5, 3, 1], [2, 6, 1, 7, 5, 3, 0, 4], [7, 3, 0, 2, 5, 1, 6, 4], [4, 7, 3, 0, 2, 5, 1, 6], [2, 5, 1, 6, 4, 0, 7, 3], [6, 3, 1, 7, 5, 0, 2, 4], [5, 3, 1, 7, 4, 6, 0, 2], [4, 7, 3, 0, 6, 1, 5, 2], [5, 2, 6, 1, 7, 4, 0, 3], [5, 7, 1, 3, 0, 6, 4, 2], [5, 2, 6, 3, 0, 7, 1, 4], [3, 6, 4, 1, 5, 0, 2, 7], [1, 7, 5, 0, 2, 4, 6, 3], [7, 1, 3, 0, 6, 4, 2, 5], [2, 4, 1, 7, 0, 6, 3, 5], [6, 0, 2, 7, 5, 3, 1, 4], [0, 5, 7, 2, 6, 3, 1, 4], [3, 5, 7, 2, 0, 6, 4, 1]]

86

[[4, 1, 3, 6, 2, 7, 5, 0], [5, 2, 0, 7, 3, 1, 6, 4], [4, 6, 1, 5, 2, 0, 7, 3], [4, 1, 5, 0, 6, 3, 7, 2], [6, 2, 0, 5, 7, 4, 1, 3], [4, 2, 0, 6, 1, 7, 5, 3], [2, 5, 1, 4, 7, 0, 6, 3], [2, 5, 3, 1, 7, 4, 6, 0], [2, 5, 7, 0, 3, 6, 4, 1], [5, 2, 0, 7, 4, 1, 3, 6], [2, 5, 7, 1, 3, 0, 6, 4], [3, 5, 7, 2, 0, 6, 4, 1], [4, 6, 1, 5, 2, 0, 3, 7], [6, 3, 1, 4, 7, 0, 2, 5], [5, 2, 0, 6, 4, 7, 1, 3], [4, 6, 3, 0, 2, 7, 5, 1], [2, 5, 1, 6, 4, 0, 7, 3], [4, 1, 7, 0, 3, 6, 2, 5], [3, 5, 7, 1, 6, 0, 2, 4], [2, 5, 3, 0, 7, 4, 6, 1], [4, 6, 1, 3, 7, 0, 2, 5], [3, 6, 2, 7, 1, 4, 0, 5], [5, 2, 6, 1, 7, 4, 0, 3], [5, 2, 6, 1, 3, 7, 0, 4], [2, 6, 1, 7, 4, 0, 3, 5], [4, 0, 7, 5, 2, 6, 1, 3], [2, 5, 7, 0, 4, 6, 1, 3], [4, 2, 0, 5, 7, 1, 3, 6], [0, 6, 4, 7, 1, 3, 5, 2], [4, 6, 0, 2, 7, 5, 3, 1], [3, 6, 4, 1, 5, 0, 2, 7], [7, 2, 0, 5, 1, 4, 6, 3], [3, 7, 4, 2, 0, 6, 1, 5], [5, 2, 4, 7, 0, 3, 1, 6], [1, 6, 2, 5, 7, 4, 0, 3], [4, 6, 0, 3, 1, 7, 5, 2], [2, 5, 1, 6, 0, 3, 7, 4], [5, 2, 6, 3, 0, 7, 1, 4], [1, 6, 4, 7, 0, 3, 5, 2], [4, 0, 7, 3, 1, 6, 2, 5], [2, 4, 1, 7, 5, 3, 6, 0], [3, 1, 7, 4, 6, 0, 2, 5], [0, 5, 7, 2, 6, 3, 1, 4], [5, 1, 6, 0, 2, 4, 7, 3], [3, 1, 6, 2, 5, 7, 0, 4], [0, 6, 3, 5, 7, 1, 4, 2], [4, 1, 3, 5, 7, 2, 0, 6], [0, 4, 7, 5, 2, 6, 1, 3], [5, 0, 4, 1, 7, 2, 6, 3], [6, 1, 3, 0, 7, 4, 2, 5], [5, 2, 4, 6, 0, 3, 1, 7], [2, 6, 1, 7, 5, 3, 0, 4], [2, 4, 1, 7, 0, 6, 3, 5], [6, 3, 1, 7, 5, 0, 2, 4], [3, 1, 7, 5, 0, 2, 4, 6], [4, 0, 3, 5, 7, 1, 6, 2], [6, 4, 2, 0, 5, 7, 1, 3], [3, 0, 4, 7, 1, 6, 2, 5], [4, 2, 7, 3, 6, 0, 5, 1], [1, 7, 5, 0, 2, 4, 6, 3], [2, 4, 6, 0, 3, 1, 7, 5], [3, 6, 4, 2, 0, 5, 7, 1], [1, 4, 6, 0, 2, 7, 5, 3], [3, 7, 0, 2, 5, 1, 6, 4], [7, 1, 3, 0, 6, 4, 2, 5], [3, 5, 0, 4, 1, 7, 2, 6], [7, 3, 0, 2, 5, 1, 6, 4], [3, 1, 4, 7, 5, 0, 2, 6], [6, 2, 7, 1, 4, 0, 5, 3], [3, 1, 6, 4, 0, 7, 5, 2], [4, 7, 3, 0, 6, 1, 5, 2], [5, 3, 1, 7, 4, 6, 0, 2], [5, 3, 0, 4, 7, 1, 6, 2], [3, 6, 0, 7, 4, 1, 5, 2], [2, 4, 7, 3, 0, 6, 1, 5], [4, 7, 3, 0, 2, 5, 1, 6], [5, 3, 6, 0, 2, 4, 1, 7], [1, 5, 7, 2, 0, 3, 6, 4], [6, 0, 2, 7, 5, 3, 1, 4], [2, 0, 6, 4, 7, 1, 3, 5], [1, 5, 0, 6, 3, 7, 2, 4], [5, 1, 6, 0, 3, 7, 4, 2], [3, 7, 0, 4, 6, 1, 5, 2], [5, 3, 6, 0, 7, 1, 4, 2], [3, 1, 6, 2, 5, 7, 4, 0], [7, 1, 4, 2, 0, 6, 3, 5], [5, 7, 1, 3, 0, 6, 4, 2], [6, 1, 5, 2, 0, 3, 7, 4], [2, 7, 3, 6, 0, 5, 1, 4]]

89

[[7, 3, 0, 2, 5, 1, 6, 4], [2, 4, 6, 0, 3, 1, 7, 5], [3, 6, 0, 7, 4, 1, 5, 2], [1, 5, 0, 6, 3, 7, 2, 4], [2, 6, 1, 7, 4, 0, 3, 5], [2, 5, 1, 6, 4, 0, 7, 3], [2, 5, 1, 6, 0, 3, 7, 4], [3, 7, 0, 2, 5, 1, 6, 4], [2, 6, 1, 7, 5, 3, 0, 4], [5, 2, 0, 7, 4, 1, 3, 6], [5, 2, 0, 6, 4, 7, 1, 3], [0, 6, 3, 5, 7, 1, 4, 2], [5, 2, 4, 6, 0, 3, 1, 7], [2, 7, 3, 6, 0, 5, 1, 4], [2, 0, 6, 4, 7, 1, 3, 5], [2, 4, 1, 7, 5, 3, 6, 0], [5, 2, 0, 7, 3, 1, 6, 4], [3, 1, 6, 2, 5, 7, 4, 0], [5, 1, 6, 0, 3, 7, 4, 2], [6, 1, 5, 2, 0, 3, 7, 4], [5, 3, 6, 0, 7, 1, 4, 2], [5, 2, 6, 3, 0, 7, 1, 4], [2, 5, 7, 0, 4, 6, 1, 3], [2, 5, 1, 4, 7, 0, 6, 3], [2, 5, 7, 0, 3, 6, 4, 1], [3, 7, 0, 4, 6, 1, 5, 2], [2, 5, 7, 1, 3, 0, 6, 4], [3, 6, 2, 7, 1, 4, 0, 5], [2, 4, 1, 7, 0, 6, 3, 5], [4, 2, 0, 5, 7, 1, 3, 6], [4, 1, 3, 5, 7, 2, 0, 6], [1, 5, 7, 2, 0, 3, 6, 4], [3, 0, 4, 7, 1, 6, 2, 5], [5, 3, 0, 4, 7, 1, 6, 2], [4, 1, 7, 0, 3, 6, 2, 5], [6, 0, 2, 7, 5, 3, 1, 4], [0, 5, 7, 2, 6, 3, 1, 4], [1, 4, 6, 3, 0, 7, 5, 2], [5, 1, 6, 0, 2, 4, 7, 3], [3, 6, 4, 2, 0, 5, 7, 1], [2, 5, 3, 1, 7, 4, 6, 0], [5, 2, 6, 1, 3, 7, 0, 4], [5, 3, 6, 0, 2, 4, 1, 7], [3, 5, 7, 1, 6, 0, 2, 4], [5, 2, 4, 7, 0, 3, 1, 6], [5, 3, 1, 7, 4, 6, 0, 2], [6, 2, 7, 1, 4, 0, 5, 3], [6, 3, 1, 4, 7, 0, 2, 5], [4, 7, 3, 0, 2, 5, 1, 6], [3, 1, 4, 7, 5, 0, 2, 6], [6, 4, 2, 0, 5, 7, 1, 3], [3, 1, 7, 5, 0, 2, 4, 6], [2, 5, 3, 0, 7, 4, 6, 1], [5, 2, 6, 1, 7, 4, 0, 3], [4, 6, 0, 2, 7, 5, 3, 1], [3, 7, 4, 2, 0, 6, 1, 5], [1, 4, 6, 0, 2, 7, 5, 3], [2, 4, 7, 3, 0, 6, 1, 5], [7, 2, 0, 5, 1, 4, 6, 3], [4, 0, 3, 5, 7, 1, 6, 2], [4, 7, 3, 0, 6, 1, 5, 2], [7, 1, 4, 2, 0, 6, 3, 5], [3, 5, 7, 2, 0, 6, 4, 1], [3, 1, 6, 2, 5, 7, 0, 4], [4, 2, 0, 6, 1, 7, 5, 3], [1, 6, 4, 7, 0, 3, 5, 2], [4, 6, 1, 3, 7, 0, 2, 5], [4, 6, 1, 5, 2, 0, 7, 3], [4, 6, 1, 5, 2, 0, 3, 7], [3, 1, 6, 4, 0, 7, 5, 2], [3, 0, 4, 7, 5, 2, 6, 1], [3, 6, 4, 1, 5, 0, 2, 7], [5, 7, 1, 3, 0, 6, 4, 2], [4, 1, 5, 0, 6, 3, 7, 2], [6, 3, 1, 7, 5, 0, 2, 4], [6, 2, 0, 5, 7, 4, 1, 3], [6, 1, 3, 0, 7, 4, 2, 5], [3, 5, 0, 4, 1, 7, 2, 6], [7, 1, 3, 0, 6, 4, 2, 5], [4, 6, 3, 0, 2, 7, 5, 1], [4, 6, 0, 3, 1, 7, 5, 2], [0, 4, 7, 5, 2, 6, 1, 3], [0, 6, 4, 7, 1, 3, 5, 2], [1, 6, 2, 5, 7, 4, 0, 3], [5, 0, 4, 1, 7, 2, 6, 3], [4, 0, 7, 5, 2, 6, 1, 3], [3, 1, 7, 4, 6, 0, 2, 5], [1, 7, 5, 0, 2, 4, 6, 3], [4, 2, 7, 3, 6, 0, 5, 1], [1, 3, 5, 7, 2, 0, 6, 4], [4, 1, 3, 6, 2, 7, 5, 0], [4, 0, 7, 3, 1, 6, 2, 5]]

89

#Escribir solución
"""

contSol = 0
for i in historico_soluciones_validas:


    aux = funcionCalidad(i)
    #print(aux)
    if(aux == 0):
      contSol+=1
      escribe_solucion(i)
      print("\n")
print("Numero de soluciones válidas", contSol)

print(historico_conflictos)

from matplotlib import pyplot as plt
plt.plot(range(len(historico_conflictos)), historico_conflictos)
plt.grid(True, zorder=0)
plt.title("Problema de las N reinas")
plt.xlabel("Generacion")
plt.ylabel("Mejor Individuo")
plt.show()

"""#Pruebas"""

N = 5

pob_inicial = 10

solucion_inicial = individuo_inicial(N)
print("individuo inical", solucion_inicial, "\n")

pb = poblacion_inicial(pob_inicial, N, solucion_inicial)

for i in range(len(pb)):
    print(pb[i])
    print("Conflictos: ", funcionCalidad(pb[i]))
    escribe_solucion(pb[i])
    print("\n")

